"use strict";

// tslint:disable-next-line: interface-name
// tslint:disable-next-line: interface-name
// tslint:disable-next-line: interface-name
// tslint:disable-next-line: interface-name
// tslint:disable-next-line: interface-name
const namespace = "CurrieTechnologies.Blazor.WebAuthentication";
const publicKeyCredentials = new Map();

function base64ToUintArray(base64) {
  const binaryString = window.atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);

  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }

  return bytes;
}

function getCredentialTransportType(input) {
  switch (input) {
    case 0:
    default:
      return "usb";

    case 1:
      return "nfc";

    case 2:
      return "ble";

    case 3:
      return "internal";
  }
}

function getCredentialType(input) {
  switch (input) {
    case 0:
    default:
      return "public-key";

    case 1:
      return "password";

    case 2:
      return "federated";
  }
}

function getUserVerificationType(input) {
  if (input == null) {
    return undefined;
  }

  switch (input) {
    case 0:
    default:
      return "required";

    case 1:
      return "preferred";

    case 2:
      return "discouraged";
  }
}

function getAuthenticatorAttachmentType(input) {
  if (input == null) {
    return undefined;
  }

  switch (input) {
    case 0:
    default:
      return "platform";

    case 1:
      return "cross-platform";
  }
}

function getAttestationType(input) {
  if (input == null) {
    return undefined;
  }

  switch (input) {
    case 0:
    default:
      return "none";

    case 1:
      return "indirect";

    case 2:
      return "direct";
  }
}

function formatPublicKeyCredentialCreationOptions(input) {
  input.attestation = getAttestationType(input.attestation);
  input.pubKeyCredParams = input.pubKeyCredParams.map((pkcp) => ({
    alg: pkcp.alg,
    type: getCredentialType(pkcp),
  }));

  if (input.authenticatorSelection) {
    input.authenticatorSelection.authenticatorAttachment = getAuthenticatorAttachmentType(
      input.authenticatorSelection.authenticatorAttachment,
    );
    input.authenticatorSelection.userVerification = getUserVerificationType(
      input.authenticatorSelection.userVerification,
    );
  }

  if (input.excludeCredentials) {
    input.excludeCredentials = input.excludeCredentials.map((ec) => ({
      id: ec.id,
      transports: ec.transports
        ? ec.transports.map((t) => getCredentialTransportType(t))
        : undefined,
      type: getCredentialType(ec.type),
    }));
  }

  input.challenge = base64ToUintArray(input.challenge);
  input.user.id = base64ToUintArray(input.user.id);
  removeNulls(input);
  return input;
}

function removeNulls(obj) {
  const isArray = obj instanceof Array;

  for (const k in obj) {
    if (obj[k] === null) {
      isArray ? obj.splice(k, 1) : delete obj[k];
    } else if (typeof obj[k] === "object") {
      removeNulls(obj[k]);
    }
  }
}

function completeCreatePublicKey(requestId, credential) {
  DotNet.invokeMethodAsync(
    namespace,
    "CompleteCreatePublicKey",
    requestId,
    credential,
  );
}

window.CurrieTechnologies = window.CurrieTechnologies || {};
window.CurrieTechnologies.Blazor = window.CurrieTechnologies.Blazor || {};
window.CurrieTechnologies.Blazor.WebAuthentication =
  window.CurrieTechnologies.Blazor.WebAuthentication || {};
window.CurrieTechnologies.Blazor.WebAuthentication.PublicKeyCredential =
  window.CurrieTechnologies.Blazor.WebAuthentication.PublicKeyCredential || {};

window.CurrieTechnologies.Blazor.WebAuthentication.CreatePublicKey = async (
  requestId,
  options,
  domId,
) => {
  const betterOptions = formatPublicKeyCredentialCreationOptions(options);
  const credential = await window.navigator.credentials.create({
    publicKey: betterOptions,
  });
  publicKeyCredentials.set(domId, credential);
  completeCreatePublicKey(requestId, credential);
};

window.CurrieTechnologies.Blazor.WebAuthentication.PublicKeyCredential.GetClientExtensionResults = (
  domId,
) => {
  const credential = publicKeyCredentials.get(domId);

  if (credential === undefined) {
    return null;
  }

  return credential.getClientExtensionResults();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
